[filament_switch_sensor check_level_pin_alt]
switch_pin: !PE0
pause_on_runout: False
event_delay: 0.1

[filament_switch_sensor e0_sensor]
pause_on_runout: False
switch_pin: !PB14
event_delay: 1.0

[include base.cfg]

# define overrides for Mainsail/Fluidd predefined macros - see client.cfg
[gcode_macro _CLIENT_VARIABLE]
variable_use_custom_pos   : True    ; use custom park coordinates for x,y [True/False]
variable_custom_park_x    : 108.0   ; custom x position; value must be within your defined min and max of X
variable_custom_park_y    : 108.0   ; custom y position; value must be within your defined min and max of Y
variable_custom_park_dz   : 10.0    ; custom dz value; the value in mm to lift the nozzle when move to park position
variable_speed_hop        : 25.0    ; z move speed in mm/s
variable_speed_move       : 300.0   ; move speed in mm/s
variable_user_cancel_macro: "_CANCEL_PRINT_WITH_AUDIO_WARNING"
variable_park_at_cancel   : True    ; allow to move the toolhead to park while execute CANCEL_PRINT [True/False]
variable_park_at_cancel_x : 108.0   ; different park position during CANCEL_PRINT [None/Position as Float]; park_at_cancel must be True
variable_park_at_cancel_y : 108.0   ; different park position during CANCEL_PRINT [None/Position as Float]; park_at_cancel must be True
variable_runout_sensor    : "filament_switch_sensor e0_sensor"
gcode:

[gcode_macro _CANCEL_PRINT_WITH_AUDIO_WARNING]
gcode:
    _COMMON_END_PRINT
    M300 S116 P350
    M300 S61 P1000


[gcode_macro _COMMON_END_PRINT]
# _COMMON_END_PRINT is used by END_PRINT and CANCEL_PRINT
gcode:
    G90                     ; absolute positioning
    G1 X105 Y105 Z220 F1500 ; move near end stop position
    M84                     ; disable motors
    _STOP
    SET_FAN_SPEED FAN=pcb_fan SPEED=0

[include client.cfg]

[delayed_gcode prepare_display_off]
initial_duration: 1
gcode:
    BED_MESH_CLEAR
    BED_MESH_PROFILE LOAD=auto

[gcode_macro START_PRINT]
description: Замена стандартного стартового G-code
variable_screen: False
gcode:
    {% set extruder_temp = params.EXTRUDER_TEMP|default(245)|float %}  ; extruder temp, usually set by slicer
    {% set bed_temp = params.BED_TEMP|default(80)|float %}             ; bed temp, usually set by slicer
    {% set force_kamp = params.FORCE_KAMP|default(False) %}            ; if True it forces the KAMP bed level process
    {% set force_leveling = params.FORCE_LEVELING|default(False) %}    ; if True it forces the bed level process
    {% set skip_leveling = params.SKIP_LEVELING|default(False) %}      ; Не строить карту
    {% set skip_zoffset = params.SKIP_ZOFFSET|default(True) %}         ; Для печати с родного экрана не устанавливать Z offset
    {% set zoffset = params.Z_OFFSET|default(0.0)|float %}             ; Установить Z offset
    {% set mesh = params.MESH|default("")|string %}                    ; Имя профиля карты стола

    {% if params.FORCE_MD5 %}
        {% set force_md5 = params.FORCE_MD5|default(True) %}
        {% if force_md5 == True %}
            {action_raise_error("Параметр FORCE_MD5 переехал в SAVE_ZMOD_DATA\nИспользуйте SAVE_ZMOD_DATA FORCE_MD5=1")}
        {% else %}
            {action_raise_error("Параметр FORCE_MD5 переехал в SAVE_ZMOD_DATA\nИспользуйте SAVE_ZMOD_DATA FORCE_MD5=0")}
        {% endif %}
    {% endif %}

    {% if params.DISABLE_PRIMING %}
        {% set disable_priming = params.DISABLE_PRIMING|default(False) %}
        {% if disable_priming == True %}
            {action_raise_error("Параметр DISABLE_PRIMING переехал в SAVE_ZMOD_DATA\nИспользуйте SAVE_ZMOD_DATA DISABLE_PRIMING=1")}
        {% else %}
            {action_raise_error("Параметр DISABLE_PRIMING переехал в SAVE_ZMOD_DATA\nИспользуйте SAVE_ZMOD_DATA DISABLE_PRIMING=0")}
        {% endif %}
    {% endif %}


    {% if params.DISABLE_SKEW_CORRECT %}
        {% set disable_skew = params.DISABLE_SKEW_CORRECT|default(True) %}
        {% if disable_skew == True %}
            {action_raise_error("Параметр DISABLE_SKEW_CORRECT переехал в SAVE_ZMOD_DATA\nИспользуйте SAVE_ZMOD_DATA DISABLE_SKEW=1")}
        {% else %}
            {action_raise_error("Параметр DISABLE_SKEW_CORRECT переехал в SAVE_ZMOD_DATA\nИспользуйте SAVE_ZMOD_DATA DISABLE_SKEW=0")}
        {% endif %}
    {% endif %}

    {% if params.CLEAR %}
        {% set clear = params.CLEAR|default("_CLEAR1")|string %}
        {action_raise_error("Параметр CLEAR переехал в SAVE_ZMOD_DATA\nИспользуйте SAVE_ZMOD_DATA CLEAR={clear}")}
    {% endif %}

    SET_FAN_SPEED FAN=pcb_fan SPEED=1

    SET_GCODE_VARIABLE MACRO=_START_PRINT VARIABLE=zforce_kamp VALUE={force_kamp|int}
    SET_GCODE_VARIABLE MACRO=_START_PRINT VARIABLE=zbed_temp VALUE={bed_temp|float}
    SET_GCODE_VARIABLE MACRO=_START_PRINT VARIABLE=zextruder_temp VALUE={extruder_temp|float}
    SET_GCODE_VARIABLE MACRO=_START_PRINT VARIABLE=zforce_leveling VALUE={force_leveling}
    SET_GCODE_VARIABLE MACRO=_START_PRINT VARIABLE=zforce_kamp VALUE={force_kamp}
    SET_GCODE_VARIABLE MACRO=_START_PRINT VARIABLE=zskip_zoffset VALUE={skip_zoffset}
    SET_GCODE_VARIABLE MACRO=_START_PRINT VARIABLE=zskip_leveling VALUE={skip_leveling}
    SET_GCODE_VARIABLE MACRO=_START_PRINT VARIABLE=zzoffset VALUE={zoffset|float}
    SET_GCODE_VARIABLE MACRO=_START_PRINT VARIABLE=zmesh VALUE='"{mesh|string}"'

    _START_PRINT

[gcode_macro END_PRINT]
description: Завершающий G-cod
gcode:
    G91                     ; relative positioning
    G1 X-2 Y-2 E-5 F2000    ; move away while retracting filament
    _COMMON_END_PRINT

    {% set zauto_reboot = printer.save_variables.variables.auto_reboot|default(0) | int %}
    {% if zauto_reboot != 0 %}
      RESPOND PREFIX="info" MSG="Автоматическая перезагрузка через 1.5 минуты"
      UPDATE_DELAYED_GCODE ID=_AUTO_REBOOT DURATION=90
    {% endif %}

    {% set zstop_motor = printer.save_variables.variables.stop_motor|default(1) | int %}
    {% if zstop_motor == 1 %}
        UPDATE_DELAYED_GCODE ID=_STOP_MOTOR DURATION=25
    {% endif %}

# Igor Polunovskiy
[gcode_macro LOAD_CELL_TARE]
description: Сброс веса тензодатчиков, альтернативный вариант
variable_success: 0
gcode:
    {% set we = printer['temperature_sensor weightValue'].temperature %}
    {% set cell_weight = printer.save_variables.variables.cell_weight|default(0) | int %}

    {% if we|abs >= cell_weight %}
        QUERY_PROBE
        _LOAD_CELL_TARE_PROBE
        _LOAD_CELL_TARE_CHECK_LEVEL_PIN_ALT

        # reset success
        SET_GCODE_VARIABLE MACRO=LOAD_CELL_TARE VARIABLE=success VALUE=0

        # try set tare, up to 10 times
        {% for i in range(10) %}
            _LOAD_CELL_TARE_IF_NO_SUCCESS_ALT ITER={i}
        {% endfor %}
        # final check if successfull
        _LOAD_CELL_TARE_FINAL_CHECK_ALT
    {% else %}
        RESPOND PREFIX="info" MSG="Начальный вес {we} < {cell_weight}. Пропускаем сброс тензодатчиков."
    {% endif %}

[gcode_macro _LOAD_CELL_TARE_IF_NO_SUCCESS_ALT]
gcode:
    {% set iter = params.ITER|default(0)|int %}

    {% if not printer["gcode_macro LOAD_CELL_TARE"].success %}
        _LOAD_CELL_TARE_SET_ALT
        _LOAD_CELL_TARE_CHECK_ALT ITER={iter}
    {% endif %}

[gcode_macro _LOAD_CELL_TARE_SET_ALT]
gcode:
    # Tare is set by toggeling _level_h1 pin
    SET_PIN PIN=level_h1 VALUE=0
    G4 P505
    M400
    SET_PIN PIN=level_h1 VALUE=1
    G4 P505
    M400
    SET_PIN PIN=level_h1 VALUE=0
    G4 P505
    M400
    SET_PIN PIN=level_h1 VALUE=1
    G4 P500
    M400

[gcode_macro _LOAD_CELL_TARE_CHECK_ALT]
gcode:
    # If level check pin is set, tare is successfull.
    {% if printer['filament_switch_sensor check_level_pin_alt'].filament_detected %}
        {% set clp="Обнуление подтверждено" %}
        SET_GCODE_VARIABLE MACRO=LOAD_CELL_TARE VARIABLE=success VALUE=1
    {% else %}
        {% set clp="Подтверждения обнуления нет" %}
    {% endif %}

    {% set iter = params.ITER|default(0)|int %}
    {% set we=printer['temperature_sensor weightValue'].temperature %}
    RESPOND PREFIX="info" MSG="Поверка №{iter}. {clp}. Вес: {we}"

[gcode_macro _LOAD_CELL_TARE_FINAL_CHECK_ALT]
gcode:
    # Check success
    {% if printer["gcode_macro LOAD_CELL_TARE"].success %}
        # Toggle level clear plin.
        # No sure what the level clear pin does. But we do the same as the stock software.
        SET_PIN PIN=level_clear VALUE=0
        G4 P10
        M400
        SET_PIN PIN=level_clear VALUE=1
        G4 P500
        M400
        _LOAD_CELL_TARE_CHECK_LEVEL_PIN_ALT
        RESPOND PREFIX="info" MSG="Сброс веса тензодатчиков прошел успешно."
    # Else raise error
    {% else %}
        {action_raise_error("Ошибка сброса веса тензодатчиков. Читайте FAQ: https://github.com/ghzserg/zmod/wiki/FAQ")}
    {% endif %}

[gcode_macro _LOAD_CELL_TARE_CHECK_LEVEL_PIN_ALT]
gcode:
    {% set we=printer['temperature_sensor weightValue'].temperature %}
    {% if printer['filament_switch_sensor check_level_pin_alt'].filament_detected %}
        {% set clp="установлен" %}
    {% else %}
        {% set clp="сброшен" %}
    {% endif %}
    RESPOND PREFIX="info" MSG="Сигнал подтверждения обнуления {clp}. Вес: {we}"
